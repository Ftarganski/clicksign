/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedProjectsIndexRouteImport } from './routes/_authenticated/projects/index'
import { Route as AuthenticatedProjectsIdRouteImport } from './routes/_authenticated/projects/$id'
import { Route as AuthenticatedProjectsSearchIndexRouteImport } from './routes/_authenticated/projects/search/index'
import { Route as AuthenticatedProjectsNewprojectIndexRouteImport } from './routes/_authenticated/projects/newproject/index'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedProjectsIndexRoute =
  AuthenticatedProjectsIndexRouteImport.update({
    id: '/projects/',
    path: '/projects/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedProjectsIdRoute = AuthenticatedProjectsIdRouteImport.update({
  id: '/projects/$id',
  path: '/projects/$id',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProjectsSearchIndexRoute =
  AuthenticatedProjectsSearchIndexRouteImport.update({
    id: '/projects/search/',
    path: '/projects/search/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedProjectsNewprojectIndexRoute =
  AuthenticatedProjectsNewprojectIndexRouteImport.update({
    id: '/projects/newproject/',
    path: '/projects/newproject/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$id': typeof AuthenticatedProjectsIdRoute
  '/projects': typeof AuthenticatedProjectsIndexRoute
  '/projects/newproject': typeof AuthenticatedProjectsNewprojectIndexRoute
  '/projects/search': typeof AuthenticatedProjectsSearchIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$id': typeof AuthenticatedProjectsIdRoute
  '/projects': typeof AuthenticatedProjectsIndexRoute
  '/projects/newproject': typeof AuthenticatedProjectsNewprojectIndexRoute
  '/projects/search': typeof AuthenticatedProjectsSearchIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/projects/$id': typeof AuthenticatedProjectsIdRoute
  '/_authenticated/projects/': typeof AuthenticatedProjectsIndexRoute
  '/_authenticated/projects/newproject/': typeof AuthenticatedProjectsNewprojectIndexRoute
  '/_authenticated/projects/search/': typeof AuthenticatedProjectsSearchIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects/$id'
    | '/projects'
    | '/projects/newproject'
    | '/projects/search'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects/$id'
    | '/projects'
    | '/projects/newproject'
    | '/projects/search'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/projects/$id'
    | '/_authenticated/projects/'
    | '/_authenticated/projects/newproject/'
    | '/_authenticated/projects/search/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/projects/': {
      id: '/_authenticated/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthenticatedProjectsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/projects/$id': {
      id: '/_authenticated/projects/$id'
      path: '/projects/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof AuthenticatedProjectsIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/projects/search/': {
      id: '/_authenticated/projects/search/'
      path: '/projects/search'
      fullPath: '/projects/search'
      preLoaderRoute: typeof AuthenticatedProjectsSearchIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/projects/newproject/': {
      id: '/_authenticated/projects/newproject/'
      path: '/projects/newproject'
      fullPath: '/projects/newproject'
      preLoaderRoute: typeof AuthenticatedProjectsNewprojectIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedProjectsIdRoute: typeof AuthenticatedProjectsIdRoute
  AuthenticatedProjectsIndexRoute: typeof AuthenticatedProjectsIndexRoute
  AuthenticatedProjectsNewprojectIndexRoute: typeof AuthenticatedProjectsNewprojectIndexRoute
  AuthenticatedProjectsSearchIndexRoute: typeof AuthenticatedProjectsSearchIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProjectsIdRoute: AuthenticatedProjectsIdRoute,
  AuthenticatedProjectsIndexRoute: AuthenticatedProjectsIndexRoute,
  AuthenticatedProjectsNewprojectIndexRoute:
    AuthenticatedProjectsNewprojectIndexRoute,
  AuthenticatedProjectsSearchIndexRoute: AuthenticatedProjectsSearchIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
